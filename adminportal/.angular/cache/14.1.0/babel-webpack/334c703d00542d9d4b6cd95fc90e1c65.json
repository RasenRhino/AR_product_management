{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.drawTexts = exports.drawImages = exports.drawBorder = exports.drawBackgroundColor = exports.renderHook = void 0;\n\nconst canvas_1 = require(\"canvas\");\n\nconst index_1 = require(\"./index\");\n/** @internal */\n\n\nfunction renderHook(canvas, hook) {\n  if (hook) {\n    hook(canvas);\n  }\n}\n\nexports.renderHook = renderHook;\n/** @internal */\n\nfunction drawBackgroundColor(ctx, options) {\n  if (options.color || typeof options.color === \"number\") {\n    const {\n      width,\n      height\n    } = ctx.canvas;\n    ctx.fillStyle = index_1.parseColorString(options.color);\n    ctx.fillRect(0, 0, width, height);\n  }\n}\n\nexports.drawBackgroundColor = drawBackgroundColor;\n/** @internal */\n\nfunction drawBorder(ctx, options) {\n  if (options.size && (options.color || typeof options.color === \"number\")) {\n    const {\n      width,\n      height\n    } = ctx.canvas;\n    ctx.strokeStyle = index_1.parseColorString(options.color); // multiple by 2 since it's align to center\n\n    ctx.lineWidth = options.size * 2;\n    ctx.strokeRect(0, 0, width, height);\n  }\n}\n\nexports.drawBorder = drawBorder;\n/** @internal */\n\nfunction drawImages(ctx, options) {\n  const {\n    images\n  } = options;\n  const canvasWidth = options.width | 0;\n  const canvasHeight = options.height | 0;\n\n  for (const imageSetting of images) {\n    const {\n      canvasImage,\n      repeat,\n      sx,\n      sy,\n      tx,\n      ty\n    } = imageSetting;\n    const layer = imageSetting.layer || 0; // make sure it's a valid image\n\n    if (!canvasImage || !canvasImage.width || !canvasImage.height) {\n      continue;\n    } // check the layer\n\n\n    if (layer !== options.layer) {\n      continue;\n    } // prepare all dimensions\n\n\n    const imageWidth = canvasImage.width;\n    const imageHeight = canvasImage.height;\n    const tempWidth = imageSetting.width === \"image\" ? imageWidth : imageSetting.width === \"canvas\" ? canvasWidth : imageSetting.width || 0;\n    const tempHeight = imageSetting.height === \"image\" ? imageHeight : imageSetting.height === \"canvas\" ? canvasHeight : imageSetting.height || 0;\n    const x = typeof sx === \"number\" ? sx >= 0 ? sx : canvasWidth + sx : imageSetting.x || 0;\n    const y = typeof sy === \"number\" ? sy >= 0 ? sy : canvasHeight + sy : imageSetting.y || 0;\n    const width = typeof tx === \"number\" ? (tx > 0 ? tx : canvasWidth + tx) - x : tempWidth || canvasWidth - x;\n    const height = typeof ty === \"number\" ? (ty > 0 ? ty : canvasHeight + ty) - y : tempHeight || canvasHeight - y; // skip if invalid\n\n    if (width <= 0 || height <= 0) {\n      continue;\n    }\n\n    if (!repeat || repeat === \"none\" || repeat === \"topLeft\") {\n      ctx.drawImage(canvasImage, 0, 0, width, height, x, y, width, height);\n    } else if (repeat === \"topCenter\") {\n      const sx1 = (imageWidth - width) / 2;\n      ctx.drawImage(canvasImage, sx1, 0, width, height, x, y, width, height);\n    } else if (repeat === \"topRight\") {\n      const sx1 = imageWidth - width;\n      ctx.drawImage(canvasImage, sx1, 0, width, height, x, y, width, height);\n    } else if (repeat === \"middleLeft\") {\n      const sy1 = (imageHeight - height) / 2;\n      ctx.drawImage(canvasImage, 0, sy1, width, height, x, y, width, height);\n    } else if (repeat === \"center\") {\n      const sx1 = (imageWidth - width) / 2;\n      const sy1 = (imageHeight - height) / 2;\n      ctx.drawImage(canvasImage, sx1, sy1, width, height, x, y, width, height);\n    } else if (repeat === \"middleRight\") {\n      const sx1 = imageWidth - width;\n      const sy1 = (imageHeight - height) / 2;\n      ctx.drawImage(canvasImage, sx1, sy1, width, height, x, y, width, height);\n    } else if (repeat === \"bottomLeft\") {\n      const sy1 = imageHeight - height;\n      ctx.drawImage(canvasImage, 0, sy1, width, height, x, y, width, height);\n    } else if (repeat === \"bottomCenter\") {\n      const sx1 = (imageWidth - width) / 2;\n      const sy1 = imageHeight - height;\n      ctx.drawImage(canvasImage, sx1, sy1, width, height, x, y, width, height);\n    } else if (repeat === \"bottomRight\") {\n      const sx1 = imageWidth - width;\n      const sy1 = imageHeight - height;\n      ctx.drawImage(canvasImage, sx1, sy1, width, height, x, y, width, height);\n    } else if (repeat === \"fit\") {\n      ctx.drawImage(canvasImage, 0, 0, imageWidth, imageHeight, x, y, width, height);\n    } else if (repeat === \"fitX\") {\n      const finalImageHeight = Math.min(height, imageHeight);\n      ctx.drawImage(canvasImage, 0, 0, imageWidth, finalImageHeight, x, y, width, finalImageHeight);\n    } else if (repeat === \"fitY\") {\n      const finalImageWidth = Math.min(x + width - x, imageWidth);\n      ctx.drawImage(canvasImage, 0, 0, finalImageWidth, imageHeight, x, y, finalImageWidth, height);\n    } else if (repeat === \"repeat\") {\n      for (let y1 = y; y1 < y + height; y1 += imageHeight) {\n        for (let x1 = x; x1 < x + width; x1 += imageWidth) {\n          const finalImageWidth = Math.min(x + width - x1, imageWidth);\n          const finalImageHeight = Math.min(y + height - y1, imageHeight);\n          ctx.drawImage(canvasImage, 0, 0, finalImageWidth, finalImageHeight, x1, y1, finalImageWidth, finalImageHeight);\n        }\n      }\n    } else if (repeat === \"repeatY\") {\n      for (let y1 = y; y1 < y + height; y1 += imageHeight) {\n        const finalImageWidth = Math.min(x + width - x, imageWidth);\n        const finalImageHeight = Math.min(y + height - y1, imageHeight);\n        ctx.drawImage(canvasImage, 0, 0, finalImageWidth, finalImageHeight, x, y1, finalImageWidth, finalImageHeight);\n      }\n    } else if (repeat === \"repeatX\") {\n      for (let x1 = x; x1 < x + width; x1 += imageWidth) {\n        const finalImageWidth = Math.min(x + width - x1, imageWidth);\n        const finalImageHeight = Math.min(y + height - y, imageHeight);\n        ctx.drawImage(canvasImage, 0, 0, finalImageWidth, finalImageHeight, x1, y, finalImageWidth, finalImageHeight);\n      }\n    }\n  }\n}\n\nexports.drawImages = drawImages;\n/** @internal */\n\nfunction drawTexts(ctx, options) {\n  const {\n    measuredParagraph,\n    width,\n    height,\n    fontFamily,\n    fontStyle,\n    fontWeight,\n    fontSize,\n    fontColor,\n    strokeSize,\n    strokeColor,\n    valign,\n    align,\n    marginLeft,\n    marginTop,\n    marginRight,\n    marginBottom,\n    chopOverflow,\n    useGlyphPadding,\n    underlineSize,\n    underlineColor\n  } = options; // return immediately if nothing to draw\n\n  if (!measuredParagraph.measuredLines.length) {\n    return;\n  }\n\n  const textCanvasWidth = useGlyphPadding ? measuredParagraph.boundingWidth : measuredParagraph.width;\n  const textCanvasHeight = useGlyphPadding ? measuredParagraph.boundingHeight : measuredParagraph.height; // we add extra height (just fontSize) to make sure we able to draw characters with boxDescent\n\n  const renderMargin = Math.round(fontSize / 2);\n  const textCanvas = canvas_1.createCanvas(textCanvasWidth + renderMargin * 2, textCanvasHeight + renderMargin * 2);\n  const parsedFontColor = index_1.parseColorString(fontColor);\n  const parsedUnderlineStyle = index_1.parseColorString(underlineColor);\n  const textCtx = textCanvas.getContext(\"2d\");\n  textCtx.font = index_1.getFontString({\n    fontStyle,\n    fontWeight,\n    fontSize,\n    fontFamily\n  }); // we draw everything cuz align may need to display different parts (this can be optimized a bit if necessary)\n\n  let y = useGlyphPadding ? fontSize + measuredParagraph.measuredLines[0].paddingTop : fontSize;\n\n  for (const measuredLine of measuredParagraph.measuredLines) {\n    let x = 0;\n\n    if (align === \"center\") {\n      x = (textCanvasWidth - measuredLine.width) / 2;\n\n      if (useGlyphPadding) {\n        x = (textCanvasWidth - (measuredLine.width - measuredLine.paddingLeft + measuredLine.paddingRight)) / 2;\n      }\n    } else if (align === \"right\") {\n      x = textCanvasWidth - measuredLine.width;\n\n      if (useGlyphPadding) {\n        x = textCanvasWidth - measuredLine.width - measuredParagraph.paddingRight;\n      }\n    } else {\n      if (useGlyphPadding) {\n        x = measuredParagraph.paddingLeft;\n      }\n    } // draw underline\n\n\n    if (underlineSize) {\n      textCtx.fillStyle = parsedUnderlineStyle;\n      textCtx.fillRect(x + renderMargin, y + renderMargin, measuredLine.width, underlineSize);\n    } // draw the text\n\n\n    textCtx.fillStyle = parsedFontColor;\n    textCtx.fillText(measuredLine.text, x + renderMargin, y + renderMargin); // draw the stoke if have\n\n    if (strokeSize) {\n      textCtx.strokeStyle = index_1.parseColorString(strokeColor);\n      textCtx.lineWidth = strokeSize;\n      textCtx.strokeText(measuredLine.text, x + renderMargin, y + renderMargin);\n    } // advance y\n\n\n    y += measuredLine.nextLineHeight;\n  } // // if we want more precise spacing\n\n\n  let sx = 0;\n  let sy = 0;\n  let tx = 0;\n  let ty = 0;\n  let sWidth = width;\n  let sHeight = height; // measure what to display for align\n\n  if (align === \"right\") {\n    sx = textCanvasWidth - width + marginRight;\n\n    if (chopOverflow) {\n      tx += marginLeft;\n      sx += marginLeft;\n      sWidth = width - marginLeft - marginRight;\n    }\n  } else if (align === \"center\") {\n    sx = (textCanvasWidth - width - marginLeft + marginRight) / 2;\n\n    if (chopOverflow) {\n      tx += marginLeft;\n      sx += marginLeft;\n      sWidth = width - marginLeft - marginRight;\n    }\n  } else {\n    // left\n    sx = -marginLeft;\n\n    if (chopOverflow) {\n      sWidth = width - marginRight;\n    }\n  } // measure what to display for valign\n\n\n  if (valign === \"bottom\") {\n    sy = textCanvasHeight - height + marginBottom;\n\n    if (chopOverflow) {\n      ty += marginTop;\n      sy += marginTop;\n      sHeight = height - marginTop - marginBottom;\n    }\n  } else if (valign === \"middle\") {\n    sy = (textCanvasHeight - height - marginTop + marginBottom) / 2;\n\n    if (chopOverflow) {\n      ty += marginTop;\n      sy += marginTop;\n      sHeight = height - marginTop - marginBottom;\n    }\n  } else {\n    // top\n    sy = -marginTop;\n\n    if (chopOverflow) {\n      sHeight = height - marginBottom;\n    }\n  } // draw the image\n\n\n  ctx.drawImage(textCanvas, sx + renderMargin, sy + renderMargin, sWidth, sHeight, tx, ty, sWidth, sHeight);\n}\n\nexports.drawTexts = drawTexts;","map":{"version":3,"names":["Object","defineProperty","exports","value","drawTexts","drawImages","drawBorder","drawBackgroundColor","renderHook","canvas_1","require","index_1","canvas","hook","ctx","options","color","width","height","fillStyle","parseColorString","fillRect","size","strokeStyle","lineWidth","strokeRect","images","canvasWidth","canvasHeight","imageSetting","canvasImage","repeat","sx","sy","tx","ty","layer","imageWidth","imageHeight","tempWidth","tempHeight","x","y","drawImage","sx1","sy1","finalImageHeight","Math","min","finalImageWidth","y1","x1","measuredParagraph","fontFamily","fontStyle","fontWeight","fontSize","fontColor","strokeSize","strokeColor","valign","align","marginLeft","marginTop","marginRight","marginBottom","chopOverflow","useGlyphPadding","underlineSize","underlineColor","measuredLines","length","textCanvasWidth","boundingWidth","textCanvasHeight","boundingHeight","renderMargin","round","textCanvas","createCanvas","parsedFontColor","parsedUnderlineStyle","textCtx","getContext","font","getFontString","paddingTop","measuredLine","paddingLeft","paddingRight","fillText","text","strokeText","nextLineHeight","sWidth","sHeight"],"sources":["/mnt/r/flipkart/product_management/adminportal/node_modules/ultimate-text-to-image/build/utils/canvas.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drawTexts = exports.drawImages = exports.drawBorder = exports.drawBackgroundColor = exports.renderHook = void 0;\nconst canvas_1 = require(\"canvas\");\nconst index_1 = require(\"./index\");\n/** @internal */\nfunction renderHook(canvas, hook) {\n    if (hook) {\n        hook(canvas);\n    }\n}\nexports.renderHook = renderHook;\n/** @internal */\nfunction drawBackgroundColor(ctx, options) {\n    if (options.color || typeof options.color === \"number\") {\n        const { width, height } = ctx.canvas;\n        ctx.fillStyle = index_1.parseColorString(options.color);\n        ctx.fillRect(0, 0, width, height);\n    }\n}\nexports.drawBackgroundColor = drawBackgroundColor;\n/** @internal */\nfunction drawBorder(ctx, options) {\n    if (options.size && (options.color || typeof options.color === \"number\")) {\n        const { width, height } = ctx.canvas;\n        ctx.strokeStyle = index_1.parseColorString(options.color);\n        // multiple by 2 since it's align to center\n        ctx.lineWidth = options.size * 2;\n        ctx.strokeRect(0, 0, width, height);\n    }\n}\nexports.drawBorder = drawBorder;\n/** @internal */\nfunction drawImages(ctx, options) {\n    const { images } = options;\n    const canvasWidth = options.width | 0;\n    const canvasHeight = options.height | 0;\n    for (const imageSetting of images) {\n        const { canvasImage, repeat, sx, sy, tx, ty } = imageSetting;\n        const layer = imageSetting.layer || 0;\n        // make sure it's a valid image\n        if (!canvasImage || !canvasImage.width || !canvasImage.height) {\n            continue;\n        }\n        // check the layer\n        if (layer !== options.layer) {\n            continue;\n        }\n        // prepare all dimensions\n        const imageWidth = canvasImage.width;\n        const imageHeight = canvasImage.height;\n        const tempWidth = imageSetting.width === \"image\" ? imageWidth : (imageSetting.width === \"canvas\" ? canvasWidth : (imageSetting.width || 0));\n        const tempHeight = imageSetting.height === \"image\" ? imageHeight : (imageSetting.height === \"canvas\" ? canvasHeight : (imageSetting.height || 0));\n        const x = typeof sx === \"number\" ? (sx >= 0 ? sx : canvasWidth + sx) : (imageSetting.x || 0);\n        const y = typeof sy === \"number\" ? (sy >= 0 ? sy : canvasHeight + sy) : (imageSetting.y || 0);\n        const width = typeof tx === \"number\" ? (tx > 0 ? tx : canvasWidth + tx) - x : (tempWidth || canvasWidth - x);\n        const height = typeof ty === \"number\" ? (ty > 0 ? ty : canvasHeight + ty) - y : (tempHeight || canvasHeight - y);\n        // skip if invalid\n        if (width <= 0 || height <= 0) {\n            continue;\n        }\n        if (!repeat || repeat === \"none\" || repeat === \"topLeft\") {\n            ctx.drawImage(canvasImage, 0, 0, width, height, x, y, width, height);\n        }\n        else if (repeat === \"topCenter\") {\n            const sx1 = (imageWidth - width) / 2;\n            ctx.drawImage(canvasImage, sx1, 0, width, height, x, y, width, height);\n        }\n        else if (repeat === \"topRight\") {\n            const sx1 = imageWidth - width;\n            ctx.drawImage(canvasImage, sx1, 0, width, height, x, y, width, height);\n        }\n        else if (repeat === \"middleLeft\") {\n            const sy1 = (imageHeight - height) / 2;\n            ctx.drawImage(canvasImage, 0, sy1, width, height, x, y, width, height);\n        }\n        else if (repeat === \"center\") {\n            const sx1 = (imageWidth - width) / 2;\n            const sy1 = (imageHeight - height) / 2;\n            ctx.drawImage(canvasImage, sx1, sy1, width, height, x, y, width, height);\n        }\n        else if (repeat === \"middleRight\") {\n            const sx1 = imageWidth - width;\n            const sy1 = (imageHeight - height) / 2;\n            ctx.drawImage(canvasImage, sx1, sy1, width, height, x, y, width, height);\n        }\n        else if (repeat === \"bottomLeft\") {\n            const sy1 = imageHeight - height;\n            ctx.drawImage(canvasImage, 0, sy1, width, height, x, y, width, height);\n        }\n        else if (repeat === \"bottomCenter\") {\n            const sx1 = (imageWidth - width) / 2;\n            const sy1 = imageHeight - height;\n            ctx.drawImage(canvasImage, sx1, sy1, width, height, x, y, width, height);\n        }\n        else if (repeat === \"bottomRight\") {\n            const sx1 = imageWidth - width;\n            const sy1 = imageHeight - height;\n            ctx.drawImage(canvasImage, sx1, sy1, width, height, x, y, width, height);\n        }\n        else if (repeat === \"fit\") {\n            ctx.drawImage(canvasImage, 0, 0, imageWidth, imageHeight, x, y, width, height);\n        }\n        else if (repeat === \"fitX\") {\n            const finalImageHeight = Math.min(height, imageHeight);\n            ctx.drawImage(canvasImage, 0, 0, imageWidth, finalImageHeight, x, y, width, finalImageHeight);\n        }\n        else if (repeat === \"fitY\") {\n            const finalImageWidth = Math.min(x + width - x, imageWidth);\n            ctx.drawImage(canvasImage, 0, 0, finalImageWidth, imageHeight, x, y, finalImageWidth, height);\n        }\n        else if (repeat === \"repeat\") {\n            for (let y1 = y; y1 < y + height; y1 += imageHeight) {\n                for (let x1 = x; x1 < x + width; x1 += imageWidth) {\n                    const finalImageWidth = Math.min(x + width - x1, imageWidth);\n                    const finalImageHeight = Math.min(y + height - y1, imageHeight);\n                    ctx.drawImage(canvasImage, 0, 0, finalImageWidth, finalImageHeight, x1, y1, finalImageWidth, finalImageHeight);\n                }\n            }\n        }\n        else if (repeat === \"repeatY\") {\n            for (let y1 = y; y1 < y + height; y1 += imageHeight) {\n                const finalImageWidth = Math.min(x + width - x, imageWidth);\n                const finalImageHeight = Math.min(y + height - y1, imageHeight);\n                ctx.drawImage(canvasImage, 0, 0, finalImageWidth, finalImageHeight, x, y1, finalImageWidth, finalImageHeight);\n            }\n        }\n        else if (repeat === \"repeatX\") {\n            for (let x1 = x; x1 < x + width; x1 += imageWidth) {\n                const finalImageWidth = Math.min(x + width - x1, imageWidth);\n                const finalImageHeight = Math.min(y + height - y, imageHeight);\n                ctx.drawImage(canvasImage, 0, 0, finalImageWidth, finalImageHeight, x1, y, finalImageWidth, finalImageHeight);\n            }\n        }\n    }\n}\nexports.drawImages = drawImages;\n/** @internal */\nfunction drawTexts(ctx, options) {\n    const { measuredParagraph, width, height, fontFamily, fontStyle, fontWeight, fontSize, fontColor, strokeSize, strokeColor, valign, align, marginLeft, marginTop, marginRight, marginBottom, chopOverflow, useGlyphPadding, underlineSize, underlineColor, } = options;\n    // return immediately if nothing to draw\n    if (!measuredParagraph.measuredLines.length) {\n        return;\n    }\n    const textCanvasWidth = useGlyphPadding ? measuredParagraph.boundingWidth : measuredParagraph.width;\n    const textCanvasHeight = useGlyphPadding ? measuredParagraph.boundingHeight : measuredParagraph.height;\n    // we add extra height (just fontSize) to make sure we able to draw characters with boxDescent\n    const renderMargin = Math.round(fontSize / 2);\n    const textCanvas = canvas_1.createCanvas(textCanvasWidth + renderMargin * 2, textCanvasHeight + renderMargin * 2);\n    const parsedFontColor = index_1.parseColorString(fontColor);\n    const parsedUnderlineStyle = index_1.parseColorString(underlineColor);\n    const textCtx = textCanvas.getContext(\"2d\");\n    textCtx.font = index_1.getFontString({ fontStyle, fontWeight, fontSize, fontFamily });\n    // we draw everything cuz align may need to display different parts (this can be optimized a bit if necessary)\n    let y = useGlyphPadding ? fontSize + measuredParagraph.measuredLines[0].paddingTop : fontSize;\n    for (const measuredLine of measuredParagraph.measuredLines) {\n        let x = 0;\n        if (align === \"center\") {\n            x = (textCanvasWidth - measuredLine.width) / 2;\n            if (useGlyphPadding) {\n                x = (textCanvasWidth - (measuredLine.width - measuredLine.paddingLeft + measuredLine.paddingRight)) / 2;\n            }\n        }\n        else if (align === \"right\") {\n            x = textCanvasWidth - measuredLine.width;\n            if (useGlyphPadding) {\n                x = textCanvasWidth - measuredLine.width - measuredParagraph.paddingRight;\n            }\n        }\n        else {\n            if (useGlyphPadding) {\n                x = measuredParagraph.paddingLeft;\n            }\n        }\n        // draw underline\n        if (underlineSize) {\n            textCtx.fillStyle = parsedUnderlineStyle;\n            textCtx.fillRect(x + renderMargin, y + renderMargin, measuredLine.width, underlineSize);\n        }\n        // draw the text\n        textCtx.fillStyle = parsedFontColor;\n        textCtx.fillText(measuredLine.text, x + renderMargin, y + renderMargin);\n        // draw the stoke if have\n        if (strokeSize) {\n            textCtx.strokeStyle = index_1.parseColorString(strokeColor);\n            textCtx.lineWidth = strokeSize;\n            textCtx.strokeText(measuredLine.text, x + renderMargin, y + renderMargin);\n        }\n        // advance y\n        y += (measuredLine.nextLineHeight);\n    }\n    // // if we want more precise spacing\n    let sx = 0;\n    let sy = 0;\n    let tx = 0;\n    let ty = 0;\n    let sWidth = width;\n    let sHeight = height;\n    // measure what to display for align\n    if (align === \"right\") {\n        sx = textCanvasWidth - width + marginRight;\n        if (chopOverflow) {\n            tx += marginLeft;\n            sx += marginLeft;\n            sWidth = width - marginLeft - marginRight;\n        }\n    }\n    else if (align === \"center\") {\n        sx = (textCanvasWidth - width - marginLeft + marginRight) / 2;\n        if (chopOverflow) {\n            tx += marginLeft;\n            sx += marginLeft;\n            sWidth = width - marginLeft - marginRight;\n        }\n    }\n    else { // left\n        sx = -marginLeft;\n        if (chopOverflow) {\n            sWidth = width - marginRight;\n        }\n    }\n    // measure what to display for valign\n    if (valign === \"bottom\") {\n        sy = textCanvasHeight - height + marginBottom;\n        if (chopOverflow) {\n            ty += marginTop;\n            sy += marginTop;\n            sHeight = height - marginTop - marginBottom;\n        }\n    }\n    else if (valign === \"middle\") {\n        sy = (textCanvasHeight - height - marginTop + marginBottom) / 2;\n        if (chopOverflow) {\n            ty += marginTop;\n            sy += marginTop;\n            sHeight = height - marginTop - marginBottom;\n        }\n    }\n    else { // top\n        sy = -marginTop;\n        if (chopOverflow) {\n            sHeight = height - marginBottom;\n        }\n    }\n    // draw the image\n    ctx.drawImage(textCanvas, sx + renderMargin, sy + renderMargin, sWidth, sHeight, tx, ty, sWidth, sHeight);\n}\nexports.drawTexts = drawTexts;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}