{"ast":null,"code":"const base64 = require('base64-js');\n\nconst UnicodeTrie = require('unicode-trie');\n\nconst {\n  BK,\n  CR,\n  LF,\n  NL,\n  SG,\n  WJ,\n  CB,\n  SP,\n  BA,\n  NS,\n  AI,\n  AL,\n  CJ,\n  ID,\n  SA,\n  XX\n} = require('./classes');\n\nconst {\n  DI_BRK,\n  IN_BRK,\n  CI_BRK,\n  CP_BRK,\n  PR_BRK,\n  pairTable\n} = require('./pairs');\n\nconst data = base64.toByteArray(\"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\");\nconst classTrie = new UnicodeTrie(data);\n\nconst mapClass = function (c) {\n  switch (c) {\n    case AI:\n      return AL;\n\n    case SA:\n    case SG:\n    case XX:\n      return AL;\n\n    case CJ:\n      return NS;\n\n    default:\n      return c;\n  }\n};\n\nconst mapFirst = function (c) {\n  switch (c) {\n    case LF:\n    case NL:\n      return BK;\n\n    case CB:\n      return BA;\n\n    case SP:\n      return WJ;\n\n    default:\n      return c;\n  }\n};\n\nclass Break {\n  constructor(position, required = false) {\n    this.position = position;\n    this.required = required;\n  }\n\n}\n\nclass LineBreaker {\n  constructor(string) {\n    this.string = string;\n    this.pos = 0;\n    this.lastPos = 0;\n    this.curClass = null;\n    this.nextClass = null;\n  }\n\n  nextCodePoint() {\n    const code = this.string.charCodeAt(this.pos++);\n    const next = this.string.charCodeAt(this.pos); // If a surrogate pair\n\n    if (0xd800 <= code && code <= 0xdbff && 0xdc00 <= next && next <= 0xdfff) {\n      this.pos++;\n      return (code - 0xd800) * 0x400 + (next - 0xdc00) + 0x10000;\n    }\n\n    return code;\n  }\n\n  nextCharClass() {\n    return mapClass(classTrie.get(this.nextCodePoint()));\n  }\n\n  nextBreak() {\n    // get the first char if we're at the beginning of the string\n    if (this.curClass == null) {\n      this.curClass = mapFirst(this.nextCharClass());\n    }\n\n    while (this.pos < this.string.length) {\n      this.lastPos = this.pos;\n      const lastClass = this.nextClass;\n      this.nextClass = this.nextCharClass(); // explicit newline\n\n      if (this.curClass === BK || this.curClass === CR && this.nextClass !== LF) {\n        this.curClass = mapFirst(mapClass(this.nextClass));\n        return new Break(this.lastPos, true);\n      } // handle classes not handled by the pair table\n\n\n      let cur;\n\n      switch (this.nextClass) {\n        case SP:\n          cur = this.curClass;\n          break;\n\n        case BK:\n        case LF:\n        case NL:\n          cur = BK;\n          break;\n\n        case CR:\n          cur = CR;\n          break;\n\n        case CB:\n          cur = BA;\n          break;\n      }\n\n      if (cur != null) {\n        this.curClass = cur;\n\n        if (this.nextClass === CB) {\n          return new Break(this.lastPos);\n        }\n\n        continue;\n      } // if not handled already, use the pair table\n\n\n      let shouldBreak = false;\n\n      switch (pairTable[this.curClass][this.nextClass]) {\n        case DI_BRK:\n          // Direct break\n          shouldBreak = true;\n          break;\n\n        case IN_BRK:\n          // possible indirect break\n          shouldBreak = lastClass === SP;\n          break;\n\n        case CI_BRK:\n          shouldBreak = lastClass === SP;\n\n          if (!shouldBreak) {\n            continue;\n          }\n\n          break;\n\n        case CP_BRK:\n          // prohibited for combining marks\n          if (lastClass !== SP) {\n            continue;\n          }\n\n          break;\n      }\n\n      this.curClass = this.nextClass;\n\n      if (shouldBreak) {\n        return new Break(this.lastPos);\n      }\n    }\n\n    if (this.pos >= this.string.length) {\n      if (this.lastPos < this.string.length) {\n        this.lastPos = this.string.length;\n        return new Break(this.string.length);\n      } else {\n        return null;\n      }\n    }\n  }\n\n}\n\nmodule.exports = LineBreaker;","map":{"version":3,"names":["base64","require","UnicodeTrie","BK","CR","LF","NL","SG","WJ","CB","SP","BA","NS","AI","AL","CJ","ID","SA","XX","DI_BRK","IN_BRK","CI_BRK","CP_BRK","PR_BRK","pairTable","data","toByteArray","classTrie","mapClass","c","mapFirst","Break","constructor","position","required","LineBreaker","string","pos","lastPos","curClass","nextClass","nextCodePoint","code","charCodeAt","next","nextCharClass","get","nextBreak","length","lastClass","cur","shouldBreak","module","exports"],"sources":["/mnt/r/flipkart/product_management/adminportal/node_modules/linebreak-next/src/linebreaker-browser.js"],"sourcesContent":["const base64 = require('base64-js');\nconst UnicodeTrie = require('unicode-trie');\r\n\r\nconst { BK, CR, LF, NL, SG, WJ, CB, SP, BA, NS, AI, AL, CJ, ID, SA, XX } = require('./classes');\r\nconst { DI_BRK, IN_BRK, CI_BRK, CP_BRK, PR_BRK, pairTable } = require('./pairs');\r\n\r\nconst data = base64.toByteArray(\"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\");\r\n\r\nconst classTrie = new UnicodeTrie(data);\r\n\r\nconst mapClass = function (c) {\r\n  switch (c) {\r\n    case AI:\r\n      return AL;\r\n\r\n    case SA:\r\n    case SG:\r\n    case XX:\r\n      return AL;\r\n\r\n    case CJ:\r\n      return NS;\r\n\r\n    default:\r\n      return c;\r\n  }\r\n};\r\n\r\nconst mapFirst = function (c) {\r\n  switch (c) {\r\n    case LF:\r\n    case NL:\r\n      return BK;\r\n\r\n    case CB:\r\n      return BA;\r\n\r\n    case SP:\r\n      return WJ;\r\n\r\n    default:\r\n      return c;\r\n  }\r\n};\r\n\r\nclass Break {\r\n  constructor(position, required = false) {\r\n    this.position = position;\r\n    this.required = required;\r\n  }\r\n}\r\n\r\nclass LineBreaker {\r\n  constructor(string) {\r\n    this.string = string;\r\n    this.pos = 0;\r\n    this.lastPos = 0;\r\n    this.curClass = null;\r\n    this.nextClass = null;\r\n  }\r\n\r\n  nextCodePoint() {\r\n    const code = this.string.charCodeAt(this.pos++);\r\n    const next = this.string.charCodeAt(this.pos);\r\n\r\n    // If a surrogate pair\r\n    if ((0xd800 <= code && code <= 0xdbff) && (0xdc00 <= next && next <= 0xdfff)) {\r\n      this.pos++;\r\n      return ((code - 0xd800) * 0x400) + (next - 0xdc00) + 0x10000;\r\n    }\r\n\r\n    return code;\r\n  }\r\n\r\n  nextCharClass() {\r\n    return mapClass(classTrie.get(this.nextCodePoint()));\r\n  }\r\n\r\n  nextBreak() {\r\n    // get the first char if we're at the beginning of the string\r\n    if (this.curClass == null) {\r\n      this.curClass = mapFirst(this.nextCharClass());\r\n    }\r\n\r\n    while (this.pos < this.string.length) {\r\n      this.lastPos = this.pos;\r\n      const lastClass = this.nextClass;\r\n      this.nextClass = this.nextCharClass();\r\n\r\n      // explicit newline\r\n      if ((this.curClass === BK) || ((this.curClass === CR) && (this.nextClass !== LF))) {\r\n        this.curClass = mapFirst(mapClass(this.nextClass));\r\n        return new Break(this.lastPos, true);\r\n      }\r\n\r\n      // handle classes not handled by the pair table\r\n      let cur;\r\n      switch (this.nextClass) {\r\n        case SP:\r\n          cur = this.curClass;\r\n          break;\r\n\r\n        case BK:\r\n        case LF:\r\n        case NL:\r\n          cur = BK;\r\n          break;\r\n\r\n        case CR:\r\n          cur = CR;\r\n          break;\r\n\r\n        case CB:\r\n          cur = BA;\r\n          break;\r\n      }\r\n\r\n      if (cur != null) {\r\n        this.curClass = cur;\r\n        if (this.nextClass === CB) {\r\n          return new Break(this.lastPos);\r\n        }\r\n        continue;\r\n      }\r\n\r\n      // if not handled already, use the pair table\r\n      let shouldBreak = false;\r\n      switch (pairTable[this.curClass][this.nextClass]) {\r\n        case DI_BRK: // Direct break\r\n          shouldBreak = true;\r\n          break;\r\n\r\n        case IN_BRK: // possible indirect break\r\n          shouldBreak = lastClass === SP;\r\n          break;\r\n\r\n        case CI_BRK:\r\n          shouldBreak = lastClass === SP;\r\n          if (!shouldBreak) {\r\n            continue;\r\n          }\r\n          break;\r\n\r\n        case CP_BRK: // prohibited for combining marks\r\n          if (lastClass !== SP) {\r\n            continue;\r\n          }\r\n          break;\r\n      }\r\n\r\n      this.curClass = this.nextClass;\r\n      if (shouldBreak) {\r\n        return new Break(this.lastPos);\r\n      }\r\n    }\r\n\r\n    if (this.pos >= this.string.length) {\r\n      if (this.lastPos < this.string.length) {\r\n        this.lastPos = this.string.length;\r\n        return new Break(this.string.length);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = LineBreaker;\r\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,cAAD,CAA3B;;AAEA,MAAM;EAAEE,EAAF;EAAMC,EAAN;EAAUC,EAAV;EAAcC,EAAd;EAAkBC,EAAlB;EAAsBC,EAAtB;EAA0BC,EAA1B;EAA8BC,EAA9B;EAAkCC,EAAlC;EAAsCC,EAAtC;EAA0CC,EAA1C;EAA8CC,EAA9C;EAAkDC,EAAlD;EAAsDC,EAAtD;EAA0DC,EAA1D;EAA8DC;AAA9D,IAAqEjB,OAAO,CAAC,WAAD,CAAlF;;AACA,MAAM;EAAEkB,MAAF;EAAUC,MAAV;EAAkBC,MAAlB;EAA0BC,MAA1B;EAAkCC,MAAlC;EAA0CC;AAA1C,IAAwDvB,OAAO,CAAC,SAAD,CAArE;;AAEA,MAAMwB,IAAI,GAAGzB,MAAM,CAAC0B,WAAP,CAAmB,knJAAnB,CAAb;AAEA,MAAMC,SAAS,GAAG,IAAIzB,WAAJ,CAAgBuB,IAAhB,CAAlB;;AAEA,MAAMG,QAAQ,GAAG,UAAUC,CAAV,EAAa;EAC5B,QAAQA,CAAR;IACE,KAAKhB,EAAL;MACE,OAAOC,EAAP;;IAEF,KAAKG,EAAL;IACA,KAAKV,EAAL;IACA,KAAKW,EAAL;MACE,OAAOJ,EAAP;;IAEF,KAAKC,EAAL;MACE,OAAOH,EAAP;;IAEF;MACE,OAAOiB,CAAP;EAbJ;AAeD,CAhBD;;AAkBA,MAAMC,QAAQ,GAAG,UAAUD,CAAV,EAAa;EAC5B,QAAQA,CAAR;IACE,KAAKxB,EAAL;IACA,KAAKC,EAAL;MACE,OAAOH,EAAP;;IAEF,KAAKM,EAAL;MACE,OAAOE,EAAP;;IAEF,KAAKD,EAAL;MACE,OAAOF,EAAP;;IAEF;MACE,OAAOqB,CAAP;EAZJ;AAcD,CAfD;;AAiBA,MAAME,KAAN,CAAY;EACVC,WAAW,CAACC,QAAD,EAAWC,QAAQ,GAAG,KAAtB,EAA6B;IACtC,KAAKD,QAAL,GAAgBA,QAAhB;IACA,KAAKC,QAAL,GAAgBA,QAAhB;EACD;;AAJS;;AAOZ,MAAMC,WAAN,CAAkB;EAChBH,WAAW,CAACI,MAAD,EAAS;IAClB,KAAKA,MAAL,GAAcA,MAAd;IACA,KAAKC,GAAL,GAAW,CAAX;IACA,KAAKC,OAAL,GAAe,CAAf;IACA,KAAKC,QAAL,GAAgB,IAAhB;IACA,KAAKC,SAAL,GAAiB,IAAjB;EACD;;EAEDC,aAAa,GAAG;IACd,MAAMC,IAAI,GAAG,KAAKN,MAAL,CAAYO,UAAZ,CAAuB,KAAKN,GAAL,EAAvB,CAAb;IACA,MAAMO,IAAI,GAAG,KAAKR,MAAL,CAAYO,UAAZ,CAAuB,KAAKN,GAA5B,CAAb,CAFc,CAId;;IACA,IAAK,UAAUK,IAAV,IAAkBA,IAAI,IAAI,MAA3B,IAAuC,UAAUE,IAAV,IAAkBA,IAAI,IAAI,MAArE,EAA8E;MAC5E,KAAKP,GAAL;MACA,OAAQ,CAACK,IAAI,GAAG,MAAR,IAAkB,KAAnB,IAA6BE,IAAI,GAAG,MAApC,IAA8C,OAArD;IACD;;IAED,OAAOF,IAAP;EACD;;EAEDG,aAAa,GAAG;IACd,OAAOjB,QAAQ,CAACD,SAAS,CAACmB,GAAV,CAAc,KAAKL,aAAL,EAAd,CAAD,CAAf;EACD;;EAEDM,SAAS,GAAG;IACV;IACA,IAAI,KAAKR,QAAL,IAAiB,IAArB,EAA2B;MACzB,KAAKA,QAAL,GAAgBT,QAAQ,CAAC,KAAKe,aAAL,EAAD,CAAxB;IACD;;IAED,OAAO,KAAKR,GAAL,GAAW,KAAKD,MAAL,CAAYY,MAA9B,EAAsC;MACpC,KAAKV,OAAL,GAAe,KAAKD,GAApB;MACA,MAAMY,SAAS,GAAG,KAAKT,SAAvB;MACA,KAAKA,SAAL,GAAiB,KAAKK,aAAL,EAAjB,CAHoC,CAKpC;;MACA,IAAK,KAAKN,QAAL,KAAkBpC,EAAnB,IAA4B,KAAKoC,QAAL,KAAkBnC,EAAnB,IAA2B,KAAKoC,SAAL,KAAmBnC,EAA7E,EAAmF;QACjF,KAAKkC,QAAL,GAAgBT,QAAQ,CAACF,QAAQ,CAAC,KAAKY,SAAN,CAAT,CAAxB;QACA,OAAO,IAAIT,KAAJ,CAAU,KAAKO,OAAf,EAAwB,IAAxB,CAAP;MACD,CATmC,CAWpC;;;MACA,IAAIY,GAAJ;;MACA,QAAQ,KAAKV,SAAb;QACE,KAAK9B,EAAL;UACEwC,GAAG,GAAG,KAAKX,QAAX;UACA;;QAEF,KAAKpC,EAAL;QACA,KAAKE,EAAL;QACA,KAAKC,EAAL;UACE4C,GAAG,GAAG/C,EAAN;UACA;;QAEF,KAAKC,EAAL;UACE8C,GAAG,GAAG9C,EAAN;UACA;;QAEF,KAAKK,EAAL;UACEyC,GAAG,GAAGvC,EAAN;UACA;MAjBJ;;MAoBA,IAAIuC,GAAG,IAAI,IAAX,EAAiB;QACf,KAAKX,QAAL,GAAgBW,GAAhB;;QACA,IAAI,KAAKV,SAAL,KAAmB/B,EAAvB,EAA2B;UACzB,OAAO,IAAIsB,KAAJ,CAAU,KAAKO,OAAf,CAAP;QACD;;QACD;MACD,CAvCmC,CAyCpC;;;MACA,IAAIa,WAAW,GAAG,KAAlB;;MACA,QAAQ3B,SAAS,CAAC,KAAKe,QAAN,CAAT,CAAyB,KAAKC,SAA9B,CAAR;QACE,KAAKrB,MAAL;UAAa;UACXgC,WAAW,GAAG,IAAd;UACA;;QAEF,KAAK/B,MAAL;UAAa;UACX+B,WAAW,GAAGF,SAAS,KAAKvC,EAA5B;UACA;;QAEF,KAAKW,MAAL;UACE8B,WAAW,GAAGF,SAAS,KAAKvC,EAA5B;;UACA,IAAI,CAACyC,WAAL,EAAkB;YAChB;UACD;;UACD;;QAEF,KAAK7B,MAAL;UAAa;UACX,IAAI2B,SAAS,KAAKvC,EAAlB,EAAsB;YACpB;UACD;;UACD;MApBJ;;MAuBA,KAAK6B,QAAL,GAAgB,KAAKC,SAArB;;MACA,IAAIW,WAAJ,EAAiB;QACf,OAAO,IAAIpB,KAAJ,CAAU,KAAKO,OAAf,CAAP;MACD;IACF;;IAED,IAAI,KAAKD,GAAL,IAAY,KAAKD,MAAL,CAAYY,MAA5B,EAAoC;MAClC,IAAI,KAAKV,OAAL,GAAe,KAAKF,MAAL,CAAYY,MAA/B,EAAuC;QACrC,KAAKV,OAAL,GAAe,KAAKF,MAAL,CAAYY,MAA3B;QACA,OAAO,IAAIjB,KAAJ,CAAU,KAAKK,MAAL,CAAYY,MAAtB,CAAP;MACD,CAHD,MAGO;QACL,OAAO,IAAP;MACD;IACF;EACF;;AAhHe;;AAmHlBI,MAAM,CAACC,OAAP,GAAiBlB,WAAjB"},"metadata":{},"sourceType":"script"}