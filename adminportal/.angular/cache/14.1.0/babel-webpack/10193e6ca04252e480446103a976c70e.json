{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnicodeLineBreak = void 0; // tslint:disable-next-line:no-var-requires variable-name\n\nconst LineBreakNext = require(\"linebreak-next\");\n\nclass UnicodeLineBreak {\n  constructor(text) {\n    this.text = text; //\n  }\n\n  getResults() {\n    const results = [];\n\n    for (const item of this) {\n      results.push(item);\n    }\n\n    return results;\n  }\n\n  [Symbol.iterator]() {\n    const text = this.text;\n    const lineBreaker = new LineBreakNext(text);\n    let last = 0;\n    return {\n      next: () => {\n        const bk = lineBreaker.nextBreak();\n\n        if (!bk) {\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n\n        const word = text.slice(last, bk.position).replace(/(\\r?\\n)*$/, \"\");\n        const index = last;\n        const isLastWord = bk.position === text.length;\n        last = bk.position;\n        return {\n          value: {\n            word,\n            index,\n            hasLineBreak: bk.required,\n            isLastWord\n          },\n          done: false\n        };\n      }\n    };\n  }\n\n}\n\nexports.UnicodeLineBreak = UnicodeLineBreak;","map":{"version":3,"names":["Object","defineProperty","exports","value","UnicodeLineBreak","LineBreakNext","require","constructor","text","getResults","results","item","push","Symbol","iterator","lineBreaker","last","next","bk","nextBreak","undefined","done","word","slice","position","replace","index","isLastWord","length","hasLineBreak","required"],"sources":["/mnt/r/flipkart/product_management/adminportal/node_modules/ultimate-text-to-image/build/UnicodeLineBreak.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UnicodeLineBreak = void 0;\n// tslint:disable-next-line:no-var-requires variable-name\nconst LineBreakNext = require(\"linebreak-next\");\nclass UnicodeLineBreak {\n    constructor(text) {\n        this.text = text;\n        //\n    }\n    getResults() {\n        const results = [];\n        for (const item of this) {\n            results.push(item);\n        }\n        return results;\n    }\n    [Symbol.iterator]() {\n        const text = this.text;\n        const lineBreaker = new LineBreakNext(text);\n        let last = 0;\n        return {\n            next: () => {\n                const bk = lineBreaker.nextBreak();\n                if (!bk) {\n                    return { value: undefined, done: true };\n                }\n                const word = text\n                    .slice(last, bk.position)\n                    .replace(/(\\r?\\n)*$/, \"\");\n                const index = last;\n                const isLastWord = bk.position === text.length;\n                last = bk.position;\n                return { value: { word, index, hasLineBreak: bk.required, isLastWord }, done: false };\n            },\n        };\n    }\n}\nexports.UnicodeLineBreak = UnicodeLineBreak;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,gBAAR,GAA2B,KAAK,CAAhC,C,CACA;;AACA,MAAMC,aAAa,GAAGC,OAAO,CAAC,gBAAD,CAA7B;;AACA,MAAMF,gBAAN,CAAuB;EACnBG,WAAW,CAACC,IAAD,EAAO;IACd,KAAKA,IAAL,GAAYA,IAAZ,CADc,CAEd;EACH;;EACDC,UAAU,GAAG;IACT,MAAMC,OAAO,GAAG,EAAhB;;IACA,KAAK,MAAMC,IAAX,IAAmB,IAAnB,EAAyB;MACrBD,OAAO,CAACE,IAAR,CAAaD,IAAb;IACH;;IACD,OAAOD,OAAP;EACH;;EACe,CAAfG,MAAM,CAACC,QAAQ,IAAI;IAChB,MAAMN,IAAI,GAAG,KAAKA,IAAlB;IACA,MAAMO,WAAW,GAAG,IAAIV,aAAJ,CAAkBG,IAAlB,CAApB;IACA,IAAIQ,IAAI,GAAG,CAAX;IACA,OAAO;MACHC,IAAI,EAAE,MAAM;QACR,MAAMC,EAAE,GAAGH,WAAW,CAACI,SAAZ,EAAX;;QACA,IAAI,CAACD,EAAL,EAAS;UACL,OAAO;YAAEf,KAAK,EAAEiB,SAAT;YAAoBC,IAAI,EAAE;UAA1B,CAAP;QACH;;QACD,MAAMC,IAAI,GAAGd,IAAI,CACZe,KADQ,CACFP,IADE,EACIE,EAAE,CAACM,QADP,EAERC,OAFQ,CAEA,WAFA,EAEa,EAFb,CAAb;QAGA,MAAMC,KAAK,GAAGV,IAAd;QACA,MAAMW,UAAU,GAAGT,EAAE,CAACM,QAAH,KAAgBhB,IAAI,CAACoB,MAAxC;QACAZ,IAAI,GAAGE,EAAE,CAACM,QAAV;QACA,OAAO;UAAErB,KAAK,EAAE;YAAEmB,IAAF;YAAQI,KAAR;YAAeG,YAAY,EAAEX,EAAE,CAACY,QAAhC;YAA0CH;UAA1C,CAAT;UAAiEN,IAAI,EAAE;QAAvE,CAAP;MACH;IAbE,CAAP;EAeH;;AA/BkB;;AAiCvBnB,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B"},"metadata":{},"sourceType":"script"}