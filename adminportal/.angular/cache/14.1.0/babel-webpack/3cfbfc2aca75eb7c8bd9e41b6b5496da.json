{"ast":null,"code":"module.exports = simpleGet;\n\nconst concat = require('simple-concat');\n\nconst decompressResponse = require('decompress-response'); // excluded from browser build\n\n\nconst http = require('http');\n\nconst https = require('https');\n\nconst once = require('once');\n\nconst querystring = require('querystring');\n\nconst url = require('url');\n\nconst isStream = o => o !== null && typeof o === 'object' && typeof o.pipe === 'function';\n\nfunction simpleGet(opts, cb) {\n  opts = Object.assign({\n    maxRedirects: 10\n  }, typeof opts === 'string' ? {\n    url: opts\n  } : opts);\n  cb = once(cb);\n\n  if (opts.url) {\n    const {\n      hostname,\n      port,\n      protocol,\n      auth,\n      path\n    } = url.parse(opts.url); // eslint-disable-line node/no-deprecated-api\n\n    delete opts.url;\n    if (!hostname && !port && !protocol && !auth) opts.path = path; // Relative redirect\n    else Object.assign(opts, {\n      hostname,\n      port,\n      protocol,\n      auth,\n      path\n    }); // Absolute redirect\n  }\n\n  const headers = {\n    'accept-encoding': 'gzip, deflate'\n  };\n  if (opts.headers) Object.keys(opts.headers).forEach(k => headers[k.toLowerCase()] = opts.headers[k]);\n  opts.headers = headers;\n  let body;\n\n  if (opts.body) {\n    body = opts.json && !isStream(opts.body) ? JSON.stringify(opts.body) : opts.body;\n  } else if (opts.form) {\n    body = typeof opts.form === 'string' ? opts.form : querystring.stringify(opts.form);\n    opts.headers['content-type'] = 'application/x-www-form-urlencoded';\n  }\n\n  if (body) {\n    if (!opts.method) opts.method = 'POST';\n    if (!isStream(body)) opts.headers['content-length'] = Buffer.byteLength(body);\n    if (opts.json && !opts.form) opts.headers['content-type'] = 'application/json';\n  }\n\n  delete opts.body;\n  delete opts.form;\n  if (opts.json) opts.headers.accept = 'application/json';\n  if (opts.method) opts.method = opts.method.toUpperCase();\n  const originalHost = opts.hostname; // hostname before potential redirect\n\n  const protocol = opts.protocol === 'https:' ? https : http; // Support http/https urls\n\n  const req = protocol.request(opts, res => {\n    if (opts.followRedirects !== false && res.statusCode >= 300 && res.statusCode < 400 && res.headers.location) {\n      opts.url = res.headers.location; // Follow 3xx redirects\n\n      delete opts.headers.host; // Discard `host` header on redirect (see #32)\n\n      res.resume(); // Discard response\n\n      const redirectHost = url.parse(opts.url).hostname; // eslint-disable-line node/no-deprecated-api\n      // If redirected host is different than original host, drop headers to prevent cookie leak (#73)\n\n      if (redirectHost !== null && redirectHost !== originalHost) {\n        delete opts.headers.cookie;\n        delete opts.headers.authorization;\n      }\n\n      if (opts.method === 'POST' && [301, 302].includes(res.statusCode)) {\n        opts.method = 'GET'; // On 301/302 redirect, change POST to GET (see #35)\n\n        delete opts.headers['content-length'];\n        delete opts.headers['content-type'];\n      }\n\n      if (opts.maxRedirects-- === 0) return cb(new Error('too many redirects'));else return simpleGet(opts, cb);\n    }\n\n    const tryUnzip = typeof decompressResponse === 'function' && opts.method !== 'HEAD';\n    cb(null, tryUnzip ? decompressResponse(res) : res);\n  });\n  req.on('timeout', () => {\n    req.abort();\n    cb(new Error('Request timed out'));\n  });\n  req.on('error', cb);\n  if (isStream(body)) body.on('error', cb).pipe(req);else req.end(body);\n  return req;\n}\n\nsimpleGet.concat = (opts, cb) => {\n  return simpleGet(opts, (err, res) => {\n    if (err) return cb(err);\n    concat(res, (err, data) => {\n      if (err) return cb(err);\n\n      if (opts.json) {\n        try {\n          data = JSON.parse(data.toString());\n        } catch (err) {\n          return cb(err, res, data);\n        }\n      }\n\n      cb(null, res, data);\n    });\n  });\n};\n\n['get', 'post', 'put', 'patch', 'head', 'delete'].forEach(method => {\n  simpleGet[method] = (opts, cb) => {\n    if (typeof opts === 'string') opts = {\n      url: opts\n    };\n    return simpleGet(Object.assign({\n      method: method.toUpperCase()\n    }, opts), cb);\n  };\n});","map":{"version":3,"names":["module","exports","simpleGet","concat","require","decompressResponse","http","https","once","querystring","url","isStream","o","pipe","opts","cb","Object","assign","maxRedirects","hostname","port","protocol","auth","path","parse","headers","keys","forEach","k","toLowerCase","body","json","JSON","stringify","form","method","Buffer","byteLength","accept","toUpperCase","originalHost","req","request","res","followRedirects","statusCode","location","host","resume","redirectHost","cookie","authorization","includes","Error","tryUnzip","on","abort","end","err","data","toString"],"sources":["/mnt/r/flipkart/product_management/adminportal/node_modules/simple-get/index.js"],"sourcesContent":["module.exports = simpleGet\n\nconst concat = require('simple-concat')\nconst decompressResponse = require('decompress-response') // excluded from browser build\nconst http = require('http')\nconst https = require('https')\nconst once = require('once')\nconst querystring = require('querystring')\nconst url = require('url')\n\nconst isStream = o => o !== null && typeof o === 'object' && typeof o.pipe === 'function'\n\nfunction simpleGet (opts, cb) {\n  opts = Object.assign({ maxRedirects: 10 }, typeof opts === 'string' ? { url: opts } : opts)\n  cb = once(cb)\n\n  if (opts.url) {\n    const { hostname, port, protocol, auth, path } = url.parse(opts.url) // eslint-disable-line node/no-deprecated-api\n    delete opts.url\n    if (!hostname && !port && !protocol && !auth) opts.path = path // Relative redirect\n    else Object.assign(opts, { hostname, port, protocol, auth, path }) // Absolute redirect\n  }\n\n  const headers = { 'accept-encoding': 'gzip, deflate' }\n  if (opts.headers) Object.keys(opts.headers).forEach(k => (headers[k.toLowerCase()] = opts.headers[k]))\n  opts.headers = headers\n\n  let body\n  if (opts.body) {\n    body = opts.json && !isStream(opts.body) ? JSON.stringify(opts.body) : opts.body\n  } else if (opts.form) {\n    body = typeof opts.form === 'string' ? opts.form : querystring.stringify(opts.form)\n    opts.headers['content-type'] = 'application/x-www-form-urlencoded'\n  }\n\n  if (body) {\n    if (!opts.method) opts.method = 'POST'\n    if (!isStream(body)) opts.headers['content-length'] = Buffer.byteLength(body)\n    if (opts.json && !opts.form) opts.headers['content-type'] = 'application/json'\n  }\n  delete opts.body; delete opts.form\n\n  if (opts.json) opts.headers.accept = 'application/json'\n  if (opts.method) opts.method = opts.method.toUpperCase()\n\n  const originalHost = opts.hostname // hostname before potential redirect\n  const protocol = opts.protocol === 'https:' ? https : http // Support http/https urls\n  const req = protocol.request(opts, res => {\n    if (opts.followRedirects !== false && res.statusCode >= 300 && res.statusCode < 400 && res.headers.location) {\n      opts.url = res.headers.location // Follow 3xx redirects\n      delete opts.headers.host // Discard `host` header on redirect (see #32)\n      res.resume() // Discard response\n\n      const redirectHost = url.parse(opts.url).hostname // eslint-disable-line node/no-deprecated-api\n      // If redirected host is different than original host, drop headers to prevent cookie leak (#73)\n      if (redirectHost !== null && redirectHost !== originalHost) {\n        delete opts.headers.cookie\n        delete opts.headers.authorization\n      }\n\n      if (opts.method === 'POST' && [301, 302].includes(res.statusCode)) {\n        opts.method = 'GET' // On 301/302 redirect, change POST to GET (see #35)\n        delete opts.headers['content-length']; delete opts.headers['content-type']\n      }\n\n      if (opts.maxRedirects-- === 0) return cb(new Error('too many redirects'))\n      else return simpleGet(opts, cb)\n    }\n\n    const tryUnzip = typeof decompressResponse === 'function' && opts.method !== 'HEAD'\n    cb(null, tryUnzip ? decompressResponse(res) : res)\n  })\n  req.on('timeout', () => {\n    req.abort()\n    cb(new Error('Request timed out'))\n  })\n  req.on('error', cb)\n\n  if (isStream(body)) body.on('error', cb).pipe(req)\n  else req.end(body)\n\n  return req\n}\n\nsimpleGet.concat = (opts, cb) => {\n  return simpleGet(opts, (err, res) => {\n    if (err) return cb(err)\n    concat(res, (err, data) => {\n      if (err) return cb(err)\n      if (opts.json) {\n        try {\n          data = JSON.parse(data.toString())\n        } catch (err) {\n          return cb(err, res, data)\n        }\n      }\n      cb(null, res, data)\n    })\n  })\n}\n\n;['get', 'post', 'put', 'patch', 'head', 'delete'].forEach(method => {\n  simpleGet[method] = (opts, cb) => {\n    if (typeof opts === 'string') opts = { url: opts }\n    return simpleGet(Object.assign({ method: method.toUpperCase() }, opts), cb)\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}